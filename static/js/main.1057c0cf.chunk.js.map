{"version":3,"sources":["assets/loader.gif","components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/searchbox/search-box.component.jsx","utils/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Card","props","country","className","alt","name","src","flag","capital","CardList","countries","pageStart","page","pageEnd","countrySort","slice","map","key","indexOf","number","SearchBox","placeholder","handleChange","type","onChange","filterUtil","arr","searchFieldVal","toLowerCase","includes","App","e","setState","searchField","target","value","getPageNumbers","countryNumber","numberOfPages","Math","ceil","pageNumbers","i","push","showPrevPage","statePage","state","showNextPage","loaded","fetch","then","response","json","this","filteredCountries","filter","length","class","aria-hidden","onClick","loaderIcon","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.1057c0cf.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/loader.bed1d767.gif\";","import React from \"react\";\nimport \"./card.styles.css\";\n\nexport const Card = props => {\n  const { country } = props;\n  return (\n    <div className=\"card-container\">\n      <img\n        alt={country.name}\n        src={country.flag}\n      />\n      <h1>{country.name}</h1>\n      <p> {country.capital} </p>\n    </div>\n  );\n};\n","import React from \"react\";\nimport { Card } from \"../card/card.component\";\nimport \"./card-list.styles.css\";\n\nexport const CardList = props => {\n  const { countries, page } = props;\n  const pageLessOne = page - 1;\n  const pageStart = pageLessOne * 20;\n  const pageEnd = pageStart + 20;\n  const countrySort = countries.slice(pageStart, pageEnd);\n  return (\n    <div className=\"card-list\">\n      {countrySort.map(country => (\n        <Card key={countries.indexOf(country)} number= {countries.indexOf(country)} country={country}></Card>\n      ))}\n    </div>\n  );\n};\n","import React from \"react\";\nimport \"./search-box.styles.css\";\n\nexport const SearchBox = ({ placeholder, handleChange }) => (\n  <input\n    className=\"search\"\n    type=\"search\"\n    placeholder={placeholder}\n    onChange={handleChange}\n  />\n);\n","export const filterUtil = (arr, searchFieldVal) => {\n  return arr.toLowerCase().includes(searchFieldVal);\n};\n","import React, { Component } from \"react\";\nimport { CardList } from \"./components/card-list/card-list.component\";\nimport { SearchBox } from \"./components/searchbox/search-box.component\";\nimport PaginationBar from \"./components/pagination/paginationBar\";\n\nimport { filterUtil } from \"./utils\";\nimport \"./App.css\";\n\nimport loaderIcon from \"./assets/loader.gif\";\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      countries: [],\n      searchField: \"\",\n      loaded: false,\n      page: 1\n    };\n  }\n\n  componentDidMount() {\n    fetch(\"https://restcountries.eu/rest/v2/all\")\n      .then(response => response.json())\n      .then(countries => this.setState({ countries: countries }))\n      .then(loaded => this.setState({ loaded: true }));\n  }\n\n  handleChange = e => {\n    this.setState({\n      page: 1,\n      searchField: e.target.value.toLowerCase()\n    });\n  };\n\n  getPageNumbers = (countryNumber = 200) => {\n    const numberOfPages = Math.ceil(countryNumber / 20);\n    let pageNumbers = [];\n    for (let i = 1; i <= numberOfPages; i++) {\n      pageNumbers.push(` ${i} `);\n    }\n    return pageNumbers;\n  };\n\n  showPrevPage = () => {\n    const statePage = this.state.page;\n    return statePage === 1 ? \"\" : this.setState({ page: statePage - 1 });\n  };\n\n  showNextPage = () => {\n    this.setState({ page: this.state.page + 1 });\n  };\n\n  render() {\n    const { countries, searchField, loaded, page } = this.state;\n\n    const filteredCountries = countries.filter(country => {\n      const { name, capital } = country;\n      return filterUtil(name, searchField) || filterUtil(capital, searchField);\n    });\n\n    return (\n      <>\n        {loaded ? (\n          <div className=\"App\">\n            <h1>\n              {filteredCountries.length === 0\n                ? \"No Country\"\n                : filteredCountries.length === 1\n                ? \"1 Country\"\n                : `${filteredCountries.length} Countries`}\n            </h1>\n\n            <SearchBox\n              placeholder=\"search countries\"\n              handleChange={this.handleChange}\n            ></SearchBox>\n            <CardList countries={filteredCountries} page={page}></CardList>\n            <div>\n              <p></p>\n              <i\n                class=\"fa fa-arrow-left\"\n                aria-hidden=\"true\"\n                onClick={this.showPrevPage}\n              ></i>\n              {this.getPageNumbers(filteredCountries.length)}\n\n              <i\n                class=\"fa fa-arrow-right\"\n                aria-hidden=\"true\"\n                onClick={this.showNextPage}\n              ></i>\n            </div>\n          </div>\n        ) : (\n          <div className=\"loader\">\n            <img src={loaderIcon} alt=\"World loader\" />\n          </div>\n        )}\n      </>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}