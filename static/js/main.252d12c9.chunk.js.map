{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/searchbox/search-box.component.jsx","utils/index.js","App.js","serviceWorker.js","index.js"],"names":["Card","props","user","className","alt","src","username","name","CardList","users","map","key","indexOf","SearchBox","placeholder","handleChange","type","onChange","filterUtil","val","searchField","toLowerCase","includes","App","e","setState","target","value","state","fetch","then","response","json","this","filteredUsers","filter","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"2UAGaA,G,MAAO,SAAAC,GAAU,IACpBC,EAASD,EAATC,KAER,OACE,yBAAKC,UAAU,kBACb,yBACEC,IAAI,OACJC,IAAG,+CAA0CH,EAAKI,YAEpD,4BAAKJ,EAAKK,SCRHC,G,MAAW,SAAAP,GAAU,IACxBQ,EAAUR,EAAVQ,MACR,OACE,yBAAKN,UAAU,aACZM,EAAMC,KAAI,SAAAR,GAAI,OACb,kBAAC,EAAD,CAAMS,IAAKF,EAAMG,QAAQV,GAAOA,KAAMA,UCNjCW,G,MAAY,SAAC,GAAD,IAAGC,EAAH,EAAGA,YAAaC,EAAhB,EAAgBA,aAAhB,OACvB,2BACEZ,UAAU,SACVa,KAAK,SACLF,YAAaA,EACbG,SAAUF,MCRDG,EAAa,SAACC,EAAKC,GAC9B,OAAOD,EAAIE,cAAcC,SAASF,IC8CrBG,G,kBAvCb,aAAe,IAAD,8BACZ,+CAaFR,aAAe,SAAAS,GACb,EAAKC,SAAS,CAAEL,YAAaI,EAAEE,OAAOC,MAAMN,iBAb5C,EAAKO,MAAQ,CACXnB,MAAO,GACPW,YAAa,IAJH,E,iFAQO,IAAD,OAClBS,MAAM,8CACHC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAArB,GAAK,OAAI,EAAKgB,SAAS,CAAEhB,MAAOA,S,+BAOhC,IAAD,EACwBwB,KAAKL,MAA5BnB,EADD,EACCA,MAAOW,EADR,EACQA,YAETc,EAAgBzB,EAAM0B,QAAO,SAAAjC,GAAS,IAClCK,EAAmBL,EAAnBK,KAAMD,EAAaJ,EAAbI,SACd,OAAOY,EAAWX,EAAMa,IAAgBF,EAAWZ,EAAUc,MAG/D,OACE,yBAAKjB,UAAU,OACb,2CACA,kBAAC,EAAD,CACEW,YAAY,eACZC,aAAckB,KAAKlB,eAErB,kBAAC,EAAD,CAAUN,MAAOyB,S,GAlCPE,cCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMlB,MAAK,SAAAmB,GACjCA,EAAaC,kB","file":"static/js/main.252d12c9.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./card.styles.css\";\r\n\r\nexport const Card = props => {\r\n  const { user } = props;\r\n  // console.log(\"TCL: user\", user);\r\n  return (\r\n    <div className=\"card-container\">\r\n      <img\r\n        alt=\"user\"\r\n        src={`https://via.placeholder.com/180?text=${user.username}`}\r\n      />\r\n      <h1>{user.name}</h1>\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { Card } from \"../card/card.component\";\r\nimport \"./card-list.styles.css\";\r\n\r\nexport const CardList = props => {\r\n  const { users } = props;\r\n  return (\r\n    <div className=\"card-list\">\r\n      {users.map(user => (\r\n        <Card key={users.indexOf(user)} user={user}></Card>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport \"./search-box.styles.css\";\r\n\r\nexport const SearchBox = ({ placeholder, handleChange }) => (\r\n  <input\r\n    className=\"search\"\r\n    type=\"search\"\r\n    placeholder={placeholder}\r\n    onChange={handleChange}\r\n  />\r\n);\r\n","export const filterUtil = (val, searchField) => {\r\n  return val.toLowerCase().includes(searchField);\r\n};\r\n","import React, { Component } from \"react\";\r\nimport { CardList } from \"./components/card-list/card-list.component\";\r\nimport { SearchBox } from \"./components/searchbox/search-box.component\";\r\n\r\nimport { filterUtil } from \"./utils\";\r\nimport \"./App.css\";\r\n\r\nclass App extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      users: [],\r\n      searchField: \"\"\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\r\n      .then(response => response.json())\r\n      .then(users => this.setState({ users: users }));\r\n  }\r\n\r\n  handleChange = e => {\r\n    this.setState({ searchField: e.target.value.toLowerCase() });\r\n  };\r\n\r\n  render() {\r\n    const { users, searchField } = this.state;\r\n\r\n    const filteredUsers = users.filter(user => {\r\n      const { name, username } = user;\r\n      return filterUtil(name, searchField) || filterUtil(username, searchField);\r\n    });\r\n\r\n    return (\r\n      <div className=\"App\">\r\n        <h1> User Cards</h1>\r\n        <SearchBox\r\n          placeholder=\"search users\"\r\n          handleChange={this.handleChange}\r\n        ></SearchBox>\r\n        <CardList users={filteredUsers}></CardList>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}